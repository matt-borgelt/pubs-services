<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="mpPublication">

    <resultMap id="result" type="MpPublication" extends="publication.mpResult">
        <result property="lockUsername" column="lock_username"/>
    </resultMap>

    <select id="getNewProdId" resultType="Integer">
        select nextval('publication_seq')
    </select>

    <sql id="singleSearchTermFilter">
    <!-- single search term needs to or/and correctly -->
        <if test="searchTerms != null and searchTerms.length > 0">
            <foreach item="term" collection="searchTerms" open="and (" separator="and" close=")">
                (
                <include refid="publication.singleSearchTermFilter"/>
                <!--  contributing office -->
                or exists (select null
                             from mp_pub_cost_center
                                  join affiliation
                                    on cost_center_id = affiliation_id
                            where publication.publication_id = mp_pub_cost_center.publication_id and
                                 upper(name) <include refid="publication.likeTerm"/>
                           )

               <!-- author -->
                or exists (select null
                             from mp_pub_contributor
                                  join contributor
                                    on mp_pub_contributor.contributor_id = contributor.contributor_id 
                            where publication.publication_id = mp_pub_contributor.publication_id and
                                  (upper(family) <include refid="publication.likeTerm"/> or
                                   upper(given) <include refid="publication.likeTerm"/> or
                                   upper(literal) <include refid="publication.likeTerm"/>
                                  )
                          )
                 )
            </foreach>
        </if>
    </sql>

    <sql id="filters">
        <where>
            <include refid="mpPublication.singleSearchTermFilter"/>
            <include refid="publication.filters"/>

            <if test="null != listId and listId.length > 0">
                 and publication_id in (select publication_id
                                          from mp_list_publication
                                         where mp_list_id in <foreach item="list" collection="listId" open="(" separator="," close=")">
                                                                 #{list,jdbcType=NUMERIC}::numeric
                                                             </foreach>
                                       )
            </if>

            <if test="contributor != null">
                and exists (select null
                              from mp_pub_contributor
                                   join contributor
                                     on mp_pub_contributor.contributor_id = contributor.contributor_id
                             where publication.publication_id = mp_pub_contributor.publication_id and
                                   to_tsvector('english', text) @@ to_tsquery('english', #{contributor})
                   )
            </if>

            <if test="contributingOffice != null and contributingOffice.length > 0">
                and exists (select null
                              from mp_pub_cost_center
                                   join affiliation
                                     on mp_pub_cost_center.cost_center_id = affiliation.affiliation_id
                             where publication.publication_id = mp_pub_cost_center.publication_id and
                                   <foreach item="co" collection="contributingOffice" open="(" separator="or" close=")">
                                       upper(name) like '%' || upper(#{co}) || '%'
                                   </foreach>
                           )
            </if>
        </where>
    </sql>

    <insert id="add" parameterType="MpPublication">
        insert into mp_publication (<include refid="publication.rawCols"/>)
             values (<include refid="publication.hosts"/>)
    </insert>

    <insert id="copyMpFromPw">
        insert into mp_publication (<include refid="publication.rawCols"/>, published)
            select <include refid="publication.rawCols"/>, 'Y'
              from publication
             where publication_id = #{id,jdbcType=INTEGER}::int
    </insert>

    <sql id="baseSelect">
        select <include refid="publication.cols"/>,
               publication.lock_username,
               publication.published,
               'mypubs' sourceDatabase
          from mp_publication publication
               <include refid="publication.associationJoins"/>
    </sql>

    <select id="getById" parameterType="Integer" resultMap="result">
        <include refid="baseSelect"/>
           where publication_id = #{value,jdbcType=INTEGER}::int
    </select>

    <select id="getByIndexId" parameterType="String" resultMap="result">
        <include refid="baseSelect"/>
         where index_id = #{value,jdbcType=VARCHAR}
    </select>

    <select id="getByMap" parameterType="map" resultMap="result">
        <include refid="baseSelect"/>
        <include refid="filters"/>
        <include refid="publication.orderBy"/>
        <include refid="base.pagingRowLimit"/>
    </select>

    <select id="getCount" parameterType="map" resultType="Integer">
        select count(*)
          from mp_publication publication
        <include refid="filters"/>
    </select>

    <update id="update" parameterType="MpPublication">
        update mp_publication
           set <include refid="publication.sets"/>
           where publication_id = #{id,jdbcType=NUMERIC}
    </update>

    <update id="lockPub">
        update mp_publication
           set lock_username = #{lockUsername,jdbcType=VARCHAR},
               <include refid="base.auditSets"/>
         where publication_id = #{publicationId,jdbcType=NUMERIC}
    </update>

    <sql id="releaseLocks">
        update mp_publication
           set lock_username = null,
               <include refid="base.auditSets"/>
    </sql>

    <update id="releaseLocksUser">
        <include refid="releaseLocks"/>
           where lock_username = #{lockUsername,jdbcType=VARCHAR}
    </update>

    <update id="releaseLocksPub">
        <include refid="releaseLocks"/>
           where publication_id = #{id,jdbcType=INTEGER}::int
    </update>

    <update id="publish">
        insert into publication (<include refid="publication.rawCols"/>)
            select <include refid="publication.rawCols"/>
                      from mp_publication
                     where publication_id = #{id,jdbcType=NUMERIC}
            on conflict (publication_id)
               do update
                  set index_id                     = excluded.index_id,
                      display_to_public_date       = excluded.display_to_public_date,
                      publication_year             = excluded.publication_year,
                      no_year                      = excluded.no_year,
                      publication_type_id          = excluded.publication_type_id,
                      publication_subtype_id       = excluded.publication_subtype_id,
                      publication_series_id        = excluded.publication_series_id,
                      series_number                = excluded.series_number,
                      subseries_title              = excluded.subseries_title,
                      chapter                      = excluded.chapter,
                      subchapter                   = excluded.subchapter,
                      display_title                = excluded.display_title,
                      title                        = excluded.title,
                      larger_work_type_id          = excluded.larger_work_type_id,
                      larger_work_title            = excluded.larger_work_title,
                      larger_work_subtype_id       = excluded.larger_work_subtype_id,
                      conference_title             = excluded.conference_title,
                      conference_date              = excluded.conference_date,
                      conference_location          = excluded.conference_location,
                      language                     = excluded.language,
                      publisher                    = excluded.publisher,
                      publisher_location           = excluded.publisher_location,
                      doi_name                     = excluded.doi_name,
                      issn                         = excluded.issn,
                      isbn                         = excluded.isbn,
                      collaboration                = excluded.collaboration,
                      program_note                 = excluded.program_note,
                      usgs_citation                = excluded.usgs_citation,
                      product_description          = excluded.product_description,
                      start_page                   = excluded.start_page,
                      end_page                     = excluded.end_page,
                      number_of_pages              = excluded.number_of_pages,
                      online_only                  = excluded.online_only,
                      additional_online_files      = excluded.additional_online_files,
                      temporal_start               = excluded.temporal_start,
                      temporal_end                 = excluded.temporal_end,
                      ipds_id                      = excluded.ipds_id,
                      ipds_review_process_state    = excluded.ipds_review_process_state,
                      scale                        = excluded.scale,
                      projection                   = excluded.projection,
                      datum                        = excluded.datum,
                      country                      = excluded.country,
                      state                        = excluded.state,
                      county                       = excluded.county,
                      city                         = excluded.city,
                      other_geospatial             = excluded.other_geospatial,
                      volume                       = excluded.volume,
                      issue                        = excluded.issue,
                      edition                      = excluded.edition,
                      public_comments              = excluded.public_comments,
                      contact_info                 = excluded.contact_info,
                      table_of_contents            = excluded.table_of_contents,
                      publishing_service_center_id = excluded.publishing_service_center_id,
                      published_date               = excluded.published_date,
                      is_part_of_id                = excluded.is_part_of_id,
                      superseded_by_id             = excluded.superseded_by_id,
                      revised_date                 = excluded.revised_date,
                      insert_date                  = excluded.insert_date,
                      insert_username              = excluded.insert_username,
                      update_date                  = now() at time zone 'UTC',
                      update_username              = #{updateUsername,jdbcType=VARCHAR},
                      abstract                     = excluded.abstract,
                      notes                        = excluded.notes,
                      geographic_extents           = excluded.geographic_extents,
                      no_usgs_authors              = excluded.no_usgs_authors,
                      geom                         = excluded.geom
    </update>

    <delete id="delete">
        delete from mp_publication <include refid="base.deleteAuditHack"/>
         where publication_id = #{id,jdbcType=INTEGER}::int
    </delete>

</mapper>
